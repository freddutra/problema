$avaliablestudent = array();
    $context = context_course::instance($courseid);
    $students = $DB->get_records("user_enrolments", array('enrolid'=>$courseid));
    foreach($students as $student){
        $isstudent = $DB->count_records("role_assignments", array('contextid'=>$courseid));
        $coursecontext = context_module::instance($course->id);
        if (!has_capability('mod/folder:managefiles', $coursecontext, $student->userid, false)) {
            //echo "is Student > ";
            //echo "membro:: " . $student->userid . "<br>";
            $avaliablestudent[] = array('userid'=>$student->userid);
        }
    }
    
    // Get avaliable groups (previous)
    $selectusersgroups = array();
    $startgroups = $DB->get_records("groups", array('courseid'=>$courseid));
    foreach($startgroups as $startgroup){
        //echo $startgroup->name;
        if(preg_match('/\[DC]\b/', $startgroup->name)){
            
            // Check who is in which group
            $returnuserofgroups = $DB->get_records("groups_members", array('groupid'=>$startgroup->id));
            //$selectusersgroups[] = array('userid'=>$returnuserofgroup->userid, 'groupname'=>$startgroup->name);
            
            $data = array();
            foreach($returnuserofgroups as $returnuserofgroup){
                //echo "membro:: " . $returnuserofgroup->userid ." (" . $startgroup->name .")<br>";
                $data[$returnuserofgroup->userid] = array('userid'=>$returnuserofgroup->userid, 'groupid'=>$startgroup->id, 'groupname'=>groups_get_group_name($startgroup->id));
            }
            $selectusersgroups[$startgroup->id] = $data;
        }
    }
    
    
    // https://docs.moodle.org/dev/Web_service_API_functions
    
    $grouplim = 1; // Limite de alunos / grupo
    $hardsplit = 2; // 50%
    $timestamp = time(); // now
    $freshcreatedgroupsid = array(); // group ids
    
    if(count($avaliablestudent) > $grouplim) {
        //echo count($avaliablestudent)/$grouplim;
        
        $groupnameformat = "Grupo @";
        
        $newgroupscount = count($avaliablestudent)/$grouplim;
        
        // Criação dos grupos OK
        if(is_int($newgroupscount) == true){
            for($i = 0; $newgroupscount > $i; $i++){
                $currentgroupname = str_replace('@', $i+1, $groupnameformat); // string de formatação
                //$randomsecret = rand(); // prefixo. evitar colisão de identificadores
                //$ident = $randomsecret.""; // identificador
                
                if($i % 2 == 0){$currentgroupname = $currentgroupname . " (argumento positivo)"; } //$ident = "dcp_"; // (argumento positivo)
                else{$currentgroupname = $currentgroupname . " (argumento negativo)";} // $ident = "dcn_"; // (argumento negativo)
                    
                $data = new stdClass();
                $data->courseid = $courseid;
                $data->name = $currentgroupname;
                //$data->idnumber = $ident.$i;
                $freshcreatedgroupsid[] = groups_create_group($data);
                
                // #############################################################################
                
                $currentgroupname = str_replace('@', $i+1, $groupnameformat); // string de formatação
                //$randomsecret = rand(); // prefixo. evitar colisão de identificadores
                //$ident = $randomsecret.""; // identificador
                
                $groupprefix = "_dc";
                $groupmagicnumber = 0;
                
                if($i % 2 == 0){$currentgroupname = $currentgroupname . " (argumento positivo)"; $groupmagicnumber = 2;} //$ident = "dcp_"; // (argumento positivo)
                else{$currentgroupname = $currentgroupname . " (argumento negativo)"; $groupmagicnumber = 1;} // $ident = "dcn_"; // (argumento negativo)
                    
                $stringconcat = $groupprefix.'['.$groupmagicnumber.']';
                $groupuniqueid = uniqid($stringconcat, true);
                
                $data = new stdClass();
                $data->courseid = $courseid;
                $data->name = $currentgroupname;
                $data->idnumber = $groupuniqueid;
                $freshcreatedgroupsid[] = groups_create_group($data);
            }
        }
        else{
            echo "Not an integer.";
        }
        
        /*
        echo $newgroupid = groups_create_group($data); //return id
        
        // Create _group [OK]
        $newgroupiddata = new stdClass();
        $newgroupiddata->courseid = $courseid;
        $newgroupiddata->idnumber;
        $newgroupiddata->name = "teste";
        $newgroupiddata->description = "";
        $newgroupiddata->descriptionformat = 0;;
        $newgroupiddata->enrolmentkey;
        $newgroupiddata->picture = 0;
        $newgroupiddata->hidepicture = 0;
        $newgroupiddata->timecreated = $timestamp;
        $newgroupiddata->timemodified = $timestamp;
        $newgroupid = $DB->insert_record("groups",$newgroupiddata);
        
        // Create _grouping_groups
        $newgroupinggroups = new stdClass();
        $newgroupinggroups->groupingid = ;
        $newgroupinggroups->groupid = $newgroupid;
        $newgroupinggroups->timeadded = $timestamp;
        */
    }

    // alocar alunos em posição oposta
    // A -> B | A <- B
    
    foreach($selectusersgroups as $setnewgroupstudents){
        foreach($setnewgroupstudents as $setnewgroupstudent){
            //echo $setnewgroupstudent['userid'];
            //if($setnewgroupstudent['userid'])
            //(\[DC]\b)(\w+)[\d]
            
            if(preg_match('/(\[DC]\b)(\w+)[1]\b/', $setnewgroupstudent['groupname'])){ // Se 1 == a favor/contra
                //echo $setnewgroupstudent['groupname'] . " was " . $setnewgroupstudent['groupname'] . ". <br>";
                // enroll user oposite group
                
                // se grupo tiver < que o numero de alunos permitido, colocar nele. Senao, proximo.
                foreach($freshcreatedgroupsid as $freshcreatedgroupid){
                    $numberusersingroup = $DB->count_records('groups_members', array("groupid"=>$freshcreatedgroupid));
                    //echo $numberusersingroup . "<br>";
                    if($numberusersingroup < $grouplim){
                        // Add
                        $group = groups_get_group($freshcreatedgroupid, 'id, courseid', MUST_EXIST);
                        $user = $DB->get_record('user', array('id'=>$setnewgroupstudent['userid']));
                        groups_add_member($group, $user);
                        break;
                    }
                }
            }
            else {} // do something
        }
    }
    
    
    // groups_remove_member($groupid, $user->id)
    
    echo "<pre>";
    
    print_r($freshcreatedgroupsid);
    print_r($selectusersgroups);
    echo "</pre>";